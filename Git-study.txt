Git is free software
Git is a version control system

在Windows上按照Git
	从Git官网下载安装文件，按默认选项安装
	从开始菜单找到Git-Git Bash
	在Git Bash中输入
		git config --global user.name "Your name" 
		git config --global user.email "Your email"
		#本地的仓库全部使用这个配置管理
		#不加参数“Your name” 和“Your email”，则查看已经设置好的配置
创建版本库 repository
	命令行Git Bash中输入
		mkdir learngit #当前目录下创建一个仓库
		cd learngit #切换目录
		pwd  #返回当前目录
		
		git init #将当前目录设为Git管理的仓库
		ls -ah #显示当前目录下的文件
提交文件
	命令行Git Bash中输入
		touch Filename #新建一个文件
		git add Filename  #把文件添加到仓库
		git commit -m "message" #把文件提交到仓库， -m 后边是本次提交的说明
修改文件后
	命令行Git Bash中输入
		git status  #掌握仓库当前的状态
		git diff Filename #查看修改的具体内容
	然后在添加到仓库，提交到仓库
修改版本
	命令行Git Bash中输入
		git reset --hard commit-id/HEAD~num #将当前版本返回到commit-id或HEAD~num 对应的版本
		git log #查看提交历史，以便确定返回到哪个版本
		git reflog #查看历史命令，确定回到未来的哪个版本
撤销修改
	场景1:当工作区某个文件内容修改了，想直接丢弃工作区的修改，用命令 git checkoiut -- filename
	场景2：当工作区内容修改了，还添加导论暂存区，想丢弃修改，分两步：第一步命令git reset HEAD <file>，回到场景1（去掉暂存区的修改），然后按场景1操作
	场景3：已经提交了的修改到版本库，想撤销修改，需要版本撤回，get reset --hard commit-d/HEAD~num
删除文件：
	当你在本地文件夹删除一个文件后，
	如果确实要从版本库删除文件，git rm Filename --> git commit -m "说明 "
	如果是删错了，可以从版本库恢复误删的文件 git checkout -- Filename
远程仓库 GitHub
	1、注册账号
	2、创建SSH Key：Git Bash --> ssh-keygen -t rsa -C "youemail@example.com"，然后回车。
	完成后，在用户主目录（C:\Users\Administrator）下会生成目录.ssh，里边有两个文件id_rsa和id_rsa.pub，一个是私钥，不能泄露，一个是公钥，可以告诉任何人
	3、登录GitHub，在账户设置（Account Setting）-->SSH Key页面，点击Add SSH Key，title任意写，Key文本框中黏贴id_rsa.pub的内容，然后点Add Key，添加Key。
添加远程仓库
	登录GitHub，右上角Create a new repo（创建新的仓库），在仓库名填入learngit，其他默认。点击Create repository（创建仓库）
	--关联本地仓库
		本地learngit仓库下运行命令 git remote add origin git@github.com:echo2004/learngit.git
		#origin是远程库的名字，为Git默认，也可以改成别的
	--把本地库的内容推送到远程库
		git push -u origin master # -u 第一次推送，将本地master和远程master关联，以后推送可以简化命令 git push origin master
		
		git pull origin master#把本地变化链接到远程仓库的分支
		git push origin master#把本地仓库文件推送到远程仓库
	--从远程库克隆一个本地库
		git clone git@github.com:echo2004/learngit.git
	#github的地址也可以用https://github.com/echo2004/learngit.git ，这是https协议，速度慢，每次需要输入账号密码，而git@是ssh协议
		git remote -v #查看远程库
		git remote rm origin #删除远程库
分支管理
	创建分支：
		git branch dev  #创建新的分支dev
		git checkout dev #切换到分支dev
		git checkout -b dev #创建并切换到分支dev
		git branch #查看所有分支，当前分支前*
		当dev分支工作完成后，切换回master
		git checkout master #切换回master
		git merge dev #将dev分支的工作成果合并到master分支
		git branch -d dev #删除分支 dev
		
		新版本中，
		git switch -c dev  #创建并切换到新的分支
		git switch dev #切换到已有的分支
		#switch比checkout更容易理解
解决冲突
	无法自动合并分支时，手动解决，然后在添加、合并，完成。
		git log --graph  #查看合并分支图
分支管理策略
	git merge --no-ff -m "说明" <将合并的分支> # 生成新的分支，在分支历史上可以看到分支信息
Bug分支
	修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

	当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；
	git stash #临时存储当前工作现场
	git stash list #查看存储的工作现场
	git stash pop  #回复工作现场并删除
	git stash apply <stash@{0}>#回复工作现场stash@{0}
	git stash drop  <stash@{0}>#删除工作现场stash@{0}
	
	在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。
	git cherry-pick <commit>	
	
	丢弃一个没有合并的分支 
	git brach -D <分支名>
多人协作的工作模式通常是这样：

	首先，可以试图用git push origin <branch-name>推送自己的修改；

	如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

	如果合并有冲突，则解决冲突，并在本地提交；

	没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！	
		
	在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，	
标签管理
	创建标签，首先切换到需要打标签的分支，然后git tag <name> 给最新提交的commit打上标签，或者git tag <name> <commit-id>给对应commit打上标签
	git tag <name> -m "说明" <commit-id> #打上带说明的标签
	git tag  # 查看标签
	git show <tag> #显示标签内容
	
	git tag -d <name> #删除标签
	
	git push origin <tagname> #推送本地标签到远程
	git push origin --tags #推送全部未推送的本地标签
	
	删除远程标签
	先删除本地标签  git tag -d <tagname>
	再删除远程   git push origin:refs/tags/<tagname>
	
使用GitHub
	1、Fork开源项目，在本地克隆一个仓库
	2、从自己账号下clone仓库，克隆到本地
	3、修改并推送到自己账号下
	4、在GitHub上发起一个pull request给对方
使用Gitee
	git remote rm origin#先删除GitHub的远程库，重新命名
	git remote add github git@github.com:michaelliao/learngit.git
	git remote add gitee git@gitee.com:liaoxuefeng/learngit.git
忽略特殊文件
	在Git根目录下创建.gitignore文件，把要忽略的文件或类型写进去
	忽略文件的原则是：
	忽略操作系统自动生成的文件，比如缩略图等；
	忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
	忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
	
	Windows产生的垃圾文件：
	Thumbs.db
	ehthumbs.db
	Desktop.ini
	Python编译产生的.pyc、.pyp、dist等文件目录
	*.py[cod]
	*.so
	*.egg
	*.egg-info
	dist
	build
	然后把.gitignore提交到git，就完成了。检验方法为git status 下显示为working directory clean
	
	如果要添加被忽略的文件
	git add -f <Filename>
	查看那条规则
	git check-ignore -v <Filename>
	要添加被忽略的指定的文件，在.gitignore文件中加入
	!<Filename>
Git配置别名
	git config --global alias <abbr order> <order> #设置命令的简写
	配置Git时，--global 指针对当前用户起作用，否则只对当前的仓库起作用
	Git的配置文件为.git/config
	